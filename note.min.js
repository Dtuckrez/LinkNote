function createReadMeNote(){const e=notes.some(e=>"README"===e.title);if(e)return;const t=generateGUID(),n={id:t,title:"README",content:"\n            <strong>Welcome to Your Note App!</strong><br><br>\n            This is your <strong>README Note</strong>, here to guide you through using the <strong>/command</strong> to link notes.<br><br>\n\n            <strong>How to Link Notes:</strong><br>\n            1. <strong>Create a new note</strong> by clicking anywhere on the screen.<br>\n            2. <strong>Type '/' followed by a word</strong> (e.g., '/TaskList').<br>\n            3. A <strong>dropdown will appear</strong> with existing note titles.<br>\n            4. <strong>Select a note</strong> to create a link to it.<br>\n            5. The linked note will appear as <em>*TaskList*</em> inside your text.<br>\n            6. <strong>Click on the linked note</strong> to open it!<br><br>\n\n            <strong>Tips:</strong><br>\n            - You can create <strong>multiple links</strong> within a note.<br>\n            - Linked notes will automatically update in the text.<br>\n            - If a note doesn’t exist yet, create it first to link it later.<br><br>\n\n            Now, go ahead and start creating your notes! 🚀\n        ",position:{x:50,y:50},size:{width:300,height:200},color:"#d1ecf1",isVisible:!0,links:new Map};notes.push(n),renderNotes(),addNoteToMenu(n)}function generateGUID(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){const t=16*Math.random()|0,n="x"===e?t:3&t|8;return n.toString(16)})}function generateUniqueNoteTitle(){let e=0;return notes.forEach(t=>{const n=t.title.match(/^note_\*(\d+)\*$/);if(n){const t=parseInt(n[1],10);!isNaN(t)&&t>e&&(e=t)}}),`note_${e+1}`}function createNote(e,t){const n=generateGUID(),o={id:n,title:generateUniqueNoteTitle(),content:"",position:{x:e,y:t},size:{width:200,height:200},color:"#ffffff",isVisible:!0,links:new Map};notes.push(o),console.log("New note added:",o),console.log("Current notes array:",notes),renderNotes(),addNoteToMenu(o)}function renderNotes(){const e=document.getElementById("note-container");e.innerHTML="",console.log("Rendering notes. Total notes:",notes.length),notes.forEach(t=>{if(!t.isVisible)return;const n=renderNote(t);e.appendChild(n)})}function renderNote(e){console.log(`Rendering note with ID: ${e.id}`);const t=document.createElement("div");return t.className="note",t.dataset.id=e.id,t.style.left=`${e.position.x}px`,t.style.top=`${e.position.y}px`,t.style.width=`${e.size.width}px`,t.style.height=`${e.size.height}px`,t.style.backgroundColor=e.color||"#ffffff",createNoteTitle(e,t),createNoteTextArea(e,t),createNoteFooter(e,t),attachNoteEventListeners(e,t),t}function createNoteTitle(e,t){const n=document.createElement("div");n.className="note-title",n.style.display="flex",n.style.alignItems="center",n.style.justifyContent="space-between";const o=document.createElement("button");o.className="close-button",o.textContent="✖",o.addEventListener("click",()=>{console.log(`Hiding note with ID: ${e.id}`),e.isVisible=!1,renderNotes()}),n.appendChild(o);const r=document.createElement("div");r.className="editable-title",r.contentEditable=!0,r.textContent=e.title,r.style.flexGrow=1,r.style.textAlign="center",r.addEventListener("input",()=>{e.title=r.textContent,updateNoteInMenu(e)}),n.appendChild(r);const l=document.createElement("div");l.className="drag-handle",l.textContent="☰",l.style.cursor="grab",n.appendChild(l),t.appendChild(n)}function createNoteTextArea(e,t){const n=document.createElement("div");n.className="note-text",n.contentEditable=!0,n.innerHTML=convertToClickableLinks(e.content),n.style.backgroundColor=e.color||"#ffffff",n.style.maxHeight="150px",n.style.overflowY="auto",n.style.padding="5px",n.style.boxSizing="border-box",n.addEventListener("input",t=>{console.log("📌 createNoteTextArea Note Object:",e),handleSlashInput(n,e),e.content=n.textContent,n.innerHTML=convertToClickableLinks(e.content),restoreCursorPosition(n),console.log(`✏️ Updated note content: "${e.content}"`)}),n.addEventListener("click",t=>{if(t.target.classList.contains("linked-note")){const n=t.target.textContent.trim(),o=n.replace(/\*/g,"");console.log(`📌 Raw clicked text: "${n}"`),console.log(`🔍 Cleaned title for lookup: "${o}"`);const r=e.links.get(o);r?(console.log(`📝 Opening linked note: ${n} (ID: ${r})`),showNote(r)):console.warn(`⚠️ No linked note found for: ${n}`)}}),n.querySelectorAll(".linked-note").forEach(e=>{e.addEventListener("click",e=>{const t=e.target.dataset.title;console.log(`Clicked linked note: ${t}`)})}),t.appendChild(n)}function convertToClickableLinks(e){return e.replace(/\*(.*?)\*/g,(e,t)=>`<span class="linked-note" data-title="${t}" contenteditable="false">*${t}*</span>`)}function createNoteFooter(e,t){const n=document.createElement("div");n.className="note-footer";for(let o=0;o<5;o++){const r=document.createElement("div");r.className="color-circle",r.style.backgroundColor=getColorByIndex(o),r.style.border="2px solid black",r.addEventListener("click",()=>{console.log(`🎨 Changing note color for ID: ${e.id} to ${r.style.backgroundColor}`),e.color=r.style.backgroundColor,t.style.backgroundColor=e.color;const o=t.querySelector(".note-text");o&&(o.style.backgroundColor=e.color);const l=t.querySelector(".note-title");l&&(l.style.backgroundColor="#f4f4f9");const s=n.querySelectorAll(".color-circle");s.forEach(e=>e.style.border="2px solid black"),r.style.border="2px solid black"}),n.appendChild(r)}const o=document.createElement("button");o.className="delete-button",o.textContent="🗑",o.addEventListener("click",()=>{console.log(`🗑 Deleting note with ID: ${e.id}`);const t=notes.findIndex(t=>t.id===e.id);-1!==t&&(notes.splice(t,1),renderNotes(),removeNoteFromMenu(e.id))}),n.appendChild(o),t.appendChild(n)}function attachNoteEventListeners(e,t){makeNoteDraggable(t,e)}const notes=[];window.onload=function(){createReadMeNote()};